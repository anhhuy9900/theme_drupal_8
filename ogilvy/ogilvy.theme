<?php

/**
 * @file
 * Preprocess functions for Ogilvy.
*/

use Drupal\Component\Utility\Xss;
use Drupal\Core\Template\Attribute;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\Entity\Node;
use Drupal\views\Views;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function ogilvy_preprocess_html(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function ogilvy_preprocess_node(&$variables) {
  if(isset($variables['node'])) {
    $node = $variables['node'];
    switch ($node->getType()) {
      case 'product':
        require_once drupal_get_path('module', 'ap_page') . '/inc/product.inc';
        _set_product_node_params($variables);
        break;
      case 'news':
        require_once drupal_get_path('module', 'ap_page') . '/inc/news.inc';
        _set_news_node_params($variables);
        break;
      case 'about_us':
        require_once drupal_get_path('module', 'ap_page') . '/inc/about_us.inc';
        _set_about_us_node_params($variables);
        break;
      default:
        break;
    }
  }
}

function ogilvy_preprocess_page(&$variables) {
  $variables['images_path'] = base_path() . drupal_get_path('theme','ogilvy') . '/images';
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function ogilvy_preprocess_block(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function ogilvy_preprocess_menu(&$variables) {

}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function ogilvy_theme_suggestions_form_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_form_alter() to add classes to the search form.
 */
function ogilvy_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

}

/**
 * Implements hook_css_alter() to alter CSS files before they are output on the page.
 *
 * @param $css
 *   An array of all CSS items (files and inline CSS) being requested on the page.
 * @param \Drupal\Core\Asset\AttachedAssetsInterface $assets
 *   The assets attached to the current response.
 *
 * @see Drupal\Core\Asset\LibraryResolverInterface::getCssAssets()
 */
function ogilvy_css_alter(&$css, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  foreach ($css as $filename => $info) {
    if(strpos($filename, 'core/') === 0) {
      unset($css[$filename]);
    }
  }
}

/**
 * Implements hook_js_alter() to perform necessary alterations to the JavaScript before it is presented on
 * the page.
 *
 * @param $javascript
 *   An array of all JavaScript being presented on the page.
 * @param \Drupal\Core\Asset\AttachedAssetsInterface $assets
 *   The assets attached to the current response.
 *
 * @see drupal_js_defaults()
 * @see \Drupal\Core\Asset\AssetResolver
 */
function ogilvy_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  foreach ($javascript as $filename => $info) {
    if(strpos($filename, 'core/') === 0) {
      unset($javascript[$filename]);
    }
  }
}

